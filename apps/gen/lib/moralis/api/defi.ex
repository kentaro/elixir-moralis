# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Moralis.Api.Defi do
  @moduledoc """
  API calls for all endpoints tagged `Defi`.
  """

  alias Moralis.Connection
  import Moralis.RequestBuilder


  @doc """
  Get pair address based on token0 and token1 address
  Fetches and returns pair data of the provided token0+token1 combination. The token0 and token1 options are interchangable (ie. there is no different outcome in \"token0=WETH and token1=USDT\" or \"token0=USDT and token1=WETH\") 

  ## Parameters

  - connection (Moralis.Connection): Connection to server
  - exchange (String.t): The factory name or address of the token exchange
  - token0_address (String.t): Token0 address
  - token1_address (String.t): Token1 address
  - opts (KeywordList): [optional] Optional parameters
    - :chain (Moralis.Model.ChainList.t): The chain to query
    - :to_block (String.t): To get the reserves at this block number
    - :to_date (String.t): Get the reserves to this date (any format that is accepted by momentjs) * Provide the param 'to_block' or 'to_date' * If 'to_date' and 'to_block' are provided, 'to_block' will be used. 
  ## Returns

  {:ok, Moralis.Model.ReservesCollection.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_pair_address(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Moralis.Model.ReservesCollection.t} | {:error, Tesla.Env.t}
  def get_pair_address(connection, exchange, token0_address, token1_address, opts \\ []) do
    optional_params = %{
      :"chain" => :query,
      :"to_block" => :query,
      :"to_date" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{token0_address}/#{token1_address}/pairAddress")
    |> add_param(:query, :"exchange", exchange)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Moralis.Model.ReservesCollection{}}
    ])
  end

  @doc """
  Get liquidity pair reserves for an Uniswap V2 based Exchange.
  Get the liquidity reserves for a given pair address. Only Uniswap V2 based exchanges supported at the moment.

  ## Parameters

  - connection (Moralis.Connection): Connection to server
  - pair_address (String.t): Liquidity pair address
  - opts (KeywordList): [optional] Optional parameters
    - :chain (Moralis.Model.ChainList.t): The chain to query
    - :to_block (String.t): To get the reserves at this block number
    - :to_date (String.t): Get the reserves to this date (any format that is accepted by momentjs) * Provide the param 'to_block' or 'to_date' * If 'to_date' and 'to_block' are provided, 'to_block' will be used. 
    - :provider_url (String.t): web3 provider url to user when using local dev chain
  ## Returns

  {:ok, Moralis.Model.ReservesCollection.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_pair_reserves(Tesla.Env.client, String.t, keyword()) :: {:ok, Moralis.Model.ReservesCollection.t} | {:error, Tesla.Env.t}
  def get_pair_reserves(connection, pair_address, opts \\ []) do
    optional_params = %{
      :"chain" => :query,
      :"to_block" => :query,
      :"to_date" => :query,
      :"provider_url" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{pair_address}/reserves")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Moralis.Model.ReservesCollection{}}
    ])
  end
end
