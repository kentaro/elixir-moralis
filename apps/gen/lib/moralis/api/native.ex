# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Moralis.Api.Native do
  @moduledoc """
  API calls for all endpoints tagged `Native`.
  """

  alias Moralis.Connection
  import Moralis.RequestBuilder


  @doc """
  Gets block contents by block hash
  Gets the contents of a block by block hash

  ## Parameters

  - connection (Moralis.Connection): Connection to server
  - block_number_or_hash (String.t): The block hash or block number
  - opts (KeywordList): [optional] Optional parameters
    - :chain (Moralis.Model.ChainList.t): The chain to query
    - :subdomain (String.t): The subdomain of the moralis server to use (Only use when selecting local devchain as chain)
  ## Returns

  {:ok, Moralis.Model.Block.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_block(Tesla.Env.client, String.t, keyword()) :: {:ok, Moralis.Model.Block.t} | {:error, Tesla.Env.t}
  def get_block(connection, block_number_or_hash, opts \\ []) do
    optional_params = %{
      :"chain" => :query,
      :"subdomain" => :query
    }
    %{}
    |> method(:get)
    |> url("/block/#{block_number_or_hash}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Moralis.Model.Block{}}
    ])
  end

  @doc """
  Gets events by topic
  Gets events in descending order based on block number

  ## Parameters

  - connection (Moralis.Connection): Connection to server
  - address (String.t): address
  - topic (String.t): The topic of the event
  - opts (KeywordList): [optional] Optional parameters
    - :chain (Moralis.Model.ChainList.t): The chain to query
    - :subdomain (String.t): The subdomain of the moralis server to use (Only use when selecting local devchain as chain)
    - :provider_url (String.t): web3 provider url to user when using local dev chain
    - :from_block (integer()): The minimum block number from where to get the logs * Provide the param 'from_block' or 'from_date' * If 'from_date' and 'from_block' are provided, 'from_block' will be used. 
    - :to_block (integer()): The maximum block number from where to get the logs. * Provide the param 'to_block' or 'to_date' * If 'to_date' and 'to_block' are provided, 'to_block' will be used. 
    - :from_date (String.t): The date from where to get the logs (any format that is accepted by momentjs) * Provide the param 'from_block' or 'from_date' * If 'from_date' and 'from_block' are provided, 'from_block' will be used. 
    - :to_date (String.t): Get the logs to this date (any format that is accepted by momentjs) * Provide the param 'to_block' or 'to_date' * If 'to_date' and 'to_block' are provided, 'to_block' will be used. 
    - :offset (integer()): offset
    - :limit (integer()): limit
    - :body (map()): ABI of the specific event
  ## Returns

  {:ok, [%LogEvent{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_contract_events(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, list(Moralis.Model.LogEvent.t)} | {:error, Tesla.Env.t}
  def get_contract_events(connection, address, topic, opts \\ []) do
    optional_params = %{
      :"chain" => :query,
      :"subdomain" => :query,
      :"providerUrl" => :query,
      :"from_block" => :query,
      :"to_block" => :query,
      :"from_date" => :query,
      :"to_date" => :query,
      :"offset" => :query,
      :"limit" => :query,
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/#{address}/events")
    |> add_param(:query, :"topic", topic)
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%Moralis.Model.LogEvent{}]}
    ])
  end

  @doc """
  Gets the closest block of the provided date
  Gets the closest block of the provided date

  ## Parameters

  - connection (Moralis.Connection): Connection to server
  - date (String.t): Unix date in miliseconds or a datestring (any format that is accepted by momentjs)
  - opts (KeywordList): [optional] Optional parameters
    - :chain (Moralis.Model.ChainList.t): The chain to query
    - :provider_url (String.t): web3 provider url to user when using local dev chain
  ## Returns

  {:ok, Moralis.Model.BlockDate.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_date_to_block(Tesla.Env.client, String.t, keyword()) :: {:ok, Moralis.Model.BlockDate.t} | {:error, Tesla.Env.t}
  def get_date_to_block(connection, date, opts \\ []) do
    optional_params = %{
      :"chain" => :query,
      :"providerUrl" => :query
    }
    %{}
    |> method(:get)
    |> url("/dateToBlock")
    |> add_param(:query, :"date", date)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Moralis.Model.BlockDate{}}
    ])
  end

  @doc """
  Gets address logs
  Gets the logs from an address

  ## Parameters

  - connection (Moralis.Connection): Connection to server
  - address (String.t): address
  - opts (KeywordList): [optional] Optional parameters
    - :chain (Moralis.Model.ChainList.t): The chain to query
    - :subdomain (String.t): The subdomain of the moralis server to use (Only use when selecting local devchain as chain)
    - :block_number (String.t): The block number * Provide the param 'block_numer' or ('from_block' and / or 'to_block') * If 'block_numer' is provided in conbinaison with 'from_block' and / or 'to_block', 'block_number' will will be used 
    - :from_block (String.t): The minimum block number from where to get the logs * Provide the param 'block_numer' or ('from_block' and / or 'to_block') * If 'block_numer' is provided in conbinaison with 'from_block' and / or 'to_block', 'block_number' will will be used 
    - :to_block (String.t): The maximum block number from where to get the logs * Provide the param 'block_numer' or ('from_block' and / or 'to_block') * If 'block_numer' is provided in conbinaison with 'from_block' and / or 'to_block', 'block_number' will will be used 
    - :from_date (String.t): The date from where to get the logs (any format that is accepted by momentjs) * Provide the param 'from_block' or 'from_date' * If 'from_date' and 'from_block' are provided, 'from_block' will be used. * If 'from_date' and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them 
    - :to_date (String.t): Get the logs to this date (any format that is accepted by momentjs) * Provide the param 'to_block' or 'to_date' * If 'to_date' and 'to_block' are provided, 'to_block' will be used. * If 'to_date' and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them 
    - :topic0 (String.t): topic0
    - :topic1 (String.t): topic1
    - :topic2 (String.t): topic2
    - :topic3 (String.t): topic3
  ## Returns

  {:ok, Moralis.Model.LogEventByAddress.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_logs_by_address(Tesla.Env.client, String.t, keyword()) :: {:ok, Moralis.Model.LogEventByAddress.t} | {:error, Tesla.Env.t}
  def get_logs_by_address(connection, address, opts \\ []) do
    optional_params = %{
      :"chain" => :query,
      :"subdomain" => :query,
      :"block_number" => :query,
      :"from_block" => :query,
      :"to_block" => :query,
      :"from_date" => :query,
      :"to_date" => :query,
      :"topic0" => :query,
      :"topic1" => :query,
      :"topic2" => :query,
      :"topic3" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{address}/logs")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Moralis.Model.LogEventByAddress{}}
    ])
  end

  @doc """
  Gets NFT transfers by block number or block hash
  Gets NFT transfers by block number or block hash

  ## Parameters

  - connection (Moralis.Connection): Connection to server
  - block_number_or_hash (String.t): The block hash or block number
  - opts (KeywordList): [optional] Optional parameters
    - :chain (Moralis.Model.ChainList.t): The chain to query
    - :subdomain (String.t): The subdomain of the moralis server to use (Only use when selecting local devchain as chain)
    - :offset (integer()): offset
    - :limit (integer()): limit
    - :cursor (String.t): The cursor returned in the last response (for getting the next page) 
  ## Returns

  {:ok, Moralis.Model.NftTransferCollection.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_nft_transfers_by_block(Tesla.Env.client, String.t, keyword()) :: {:ok, Moralis.Model.NftTransferCollection.t} | {:error, Tesla.Env.t}
  def get_nft_transfers_by_block(connection, block_number_or_hash, opts \\ []) do
    optional_params = %{
      :"chain" => :query,
      :"subdomain" => :query,
      :"offset" => :query,
      :"limit" => :query,
      :"cursor" => :query
    }
    %{}
    |> method(:get)
    |> url("/block/#{block_number_or_hash}/nft/transfers")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Moralis.Model.NftTransferCollection{}}
    ])
  end

  @doc """
  Get transaction details by transaction hash
  Gets the contents of a block transaction by hash

  ## Parameters

  - connection (Moralis.Connection): Connection to server
  - transaction_hash (String.t): The transaction hash
  - opts (KeywordList): [optional] Optional parameters
    - :chain (Moralis.Model.ChainList.t): The chain to query
    - :subdomain (String.t): The subdomain of the moralis server to use (Only use when selecting local devchain as chain)
  ## Returns

  {:ok, Moralis.Model.BlockTransaction.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_transaction(Tesla.Env.client, String.t, keyword()) :: {:ok, Moralis.Model.BlockTransaction.t} | {:error, Tesla.Env.t}
  def get_transaction(connection, transaction_hash, opts \\ []) do
    optional_params = %{
      :"chain" => :query,
      :"subdomain" => :query
    }
    %{}
    |> method(:get)
    |> url("/transaction/#{transaction_hash}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Moralis.Model.BlockTransaction{}}
    ])
  end

  @doc """
  Runs a function of a contract abi
  Runs a given function of a contract abi and returns readonly data

  ## Parameters

  - connection (Moralis.Connection): Connection to server
  - address (String.t): address
  - function_name (String.t): function_name
  - run_contract_dto (RunContractDto): Body
  - opts (KeywordList): [optional] Optional parameters
    - :chain (Moralis.Model.ChainList.t): The chain to query
    - :subdomain (String.t): The subdomain of the moralis server to use (Only use when selecting local devchain as chain)
    - :provider_url (String.t): web3 provider url to user when using local dev chain
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec run_contract_function(Tesla.Env.client, String.t, String.t, Moralis.Model.RunContractDto.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def run_contract_function(connection, address, function_name, run_contract_dto, opts \\ []) do
    optional_params = %{
      :"chain" => :query,
      :"subdomain" => :query,
      :"providerUrl" => :query
    }
    %{}
    |> method(:post)
    |> url("/#{address}/function")
    |> add_param(:query, :"function_name", function_name)
    |> add_param(:body, :body, run_contract_dto)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false}
    ])
  end
end
